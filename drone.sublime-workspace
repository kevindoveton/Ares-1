{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "// Ares 1\n// 2015 Kevin Doveton // Lewis Daly\n\n#include \"receiver.h\"\n#include \"motors.h\"\n#include \"sensors.h\"\n#include \"pid.h\"\n\n//#define DEBUG\n\nReceiver receiver;\nMotors motors;\nSensors sensors;\n\nint ch1 = 100, ch2 = 100, ch3 = 100, ch4 = 100, ch5 = 100, ch6 = 100;\n\nPID pids[6];\n#define PID_PITCH_RATE 0\n#define PID_ROLL_RATE 1\n#define PID_PITCH_STAB 2\n#define PID_ROLL_STAB 3\n#define PID_YAW_RATE 4\n#define PID_YAW_STAB 5\n\n#define wrap_180(x) (x < -180 ? x+360 : (x > 180 ? x - 360: x))\n\nvoid setup() \n{\n	receiver.init();\n	sensors.init();\n	motors.init();\n\n	pids[PID_PITCH_RATE].kP(0.7);\n	//  pids[PID_PITCH_RATE].kI(1);\n	pids[PID_PITCH_RATE].imax(50);\n\n	pids[PID_ROLL_RATE].kP(0.7);\n	//  pids[PID_ROLL_RATE].kI(1);\n	pids[PID_ROLL_RATE].imax(50);\n\n	pids[PID_YAW_RATE].kP(2.5);\n	//  pids[PID_YAW_RATE].kI(1);\n	pids[PID_YAW_RATE].imax(50);\n\n	pids[PID_PITCH_STAB].kP(4.5);\n	pids[PID_ROLL_STAB].kP(4.5);\n	pids[PID_YAW_STAB].kP(10);\n\n\n	// Start Serial Monitor\n	#ifdef DEBUG\n		Serial.begin(9600);\n	#endif\n\n}\n\nvoid loop() \n{\n	static float yaw_target = 0;  \n\n	// Get Pulse Width of all Channels\n	ch1 = receiver.readYaw();\n	ch2 = receiver.readPitch();\n	ch3 = receiver.readThrottle();\n	ch4 = receiver.readRoll();\n\n	long rcthr, rcyaw, rcpit, rcroll;   // Variables to store rc input\n	rcthr = ch3;\n	rcyaw = map(ch1, 1200, 2000, -150, 150);\n	rcpit = map(ch2, 1200, 2000, -45, 45);\n	rcroll = map(ch4, 1200, 2000, -45, 45);\n\n	float roll,pitch,yaw;  \n	RTVector3 sensorVector = sensors.readSensors(); //Not sure how to convert to euler...\n	//TODO: convert to degrees?\n	roll = sensorVector.x();\n	pitch = sensorVector.y();\n	yaw = sensorVector.z();\n\n	RTVector3 gyroVector = sensors.readGyro();\n	float gyroPitch = gyroVector.y(), gyroRoll = gyroVector.x(), gyroYaw = gyroVector.z(); //convert to deg?\n\n\n	if(rcthr > 1170) \n	{   // *** MINIMUM THROTTLE TO DO CORRECTIONS MAKE THIS 20pts ABOVE YOUR MIN THR STICK **/\n		\n		// Stablise PIDS\n		float pitch_stab_output = constrain(pids[PID_PITCH_STAB].get_pid((float)rcpit - pitch, 1), -250, 250); \n		float roll_stab_output = constrain(pids[PID_ROLL_STAB].get_pid((float)rcroll - roll, 1), -250, 250);\n		float yaw_stab_output = constrain(pids[PID_YAW_STAB].get_pid(wrap_180(yaw_target - yaw), 1), -360, 360);\n\n		long pitch_output = pids[PID_PITCH_RATE].get_pid(gyroPitch - rcpit, 1);  \n		long roll_output = pids[PID_ROLL_RATE].get_pid(gyroRoll - rcroll, 1);  \n		long yaw_output = pids[PID_YAW_RATE].get_pid(gyroYaw - rcyaw, 1); \n	\n		// is pilot asking for yaw change - if so feed directly to rate pid (overwriting yaw stab output)\n		if(abs(rcyaw ) > 5) {\n			yaw_stab_output = rcyaw;\n			yaw_target = yaw;   // remember this yaw for when pilot stops\n		}\n\n		// rate PIDS\n//    long pitch_output =  (long) constrain(pids[PID_PITCH_RATE].get_pid(pitch_stab_output - gyroPitch, 1), - 500, 500);  \n//    long roll_output =  (long) constrain(pids[PID_ROLL_RATE].get_pid(roll_stab_output - gyroRoll, 1), -500, 500);  \n//    long yaw_output =  (long) constrain(pids[PID_YAW_RATE].get_pid(yaw_stab_output - gyroYaw, 1), -500, 500);  \n		\n		motors.setSpeeds(rcthr - roll_output - pitch_output, \n						rcthr + roll_output - pitch_output, \n						rcthr + roll_output + pitch_output, \n						rcthr - roll_output + pitch_output);\n		\n//    Add yaw support\n		motors.setSpeeds(rcthr - roll_output - pitch_output - yaw_output, \n						rcthr + roll_output - pitch_output + yaw_output, \n						rcthr + roll_output + pitch_output - yaw_output, \n						rcthr - roll_output + pitch_output + yaw_output);\n	} \n	else \n	{  // MOTORS OFF\n		motors.setAllSpeed(1000); //not sure if 1000 is correct.\n\n		// reset yaw target so we maintain this on takeoff\n		yaw_target = yaw;\n		\n		for(int i=0; i<6; i++) // reset PID integrals whilst on the ground\n			pids[i].reset_I();\n	}\n	\n\n\n	//seems to be 1300 - 1700\n	#ifdef DEBUG\n		Serial.println(\"Yaw-chl 1:\\tPitch-ch2:\\tThrott-ch3:\\tRoll-ch4:\\t\");\n		String outputString = String(rcthr, DEC) + \"\\t\\t\" + String(rcyaw, DEC) + \"\\t\\t\" + String(rcpit, DEC) + \"\\t\\t\" + String(rcroll, DEC);\n		Serial.print(outputString);\n		Serial.print(\"\\n\");\n	#endif\n\n\n	//Test the esc's\n	//int throttle = map(ch3, 1300, 2000, 0, 179);\n	//esc1.write(throttle);\n\n	// Delay to Make it Readable\n	//  delay(500);\n}\n\n//int getCurrentReading(int channelNumber, int lastValue) \n//{\n//	int currentReading = pulseIn(channelNumber, HIGH, 25000);\n//	if (currentReading != 0) {\n//		return currentReading;\n//	}\n//	return lastValue; \n//}\n\n",
			"file": "drone.ino",
			"file_size": 4423,
			"file_write_time": 1450002628000000,
			"settings":
			{
				"buffer_size": 4423,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Add Repository"
			],
			[
				"intall pack",
				"Package Control: Install Package"
			]
		],
		"width": 384.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/kevindoveton/Google Drive/DroneProject/ares1/drone/drone.sublime-project",
		"/Users/kevindoveton/Google Drive/DroneProject/ares1/drone/receiver.cpp",
		"/Users/kevindoveton/Google Drive/DroneProject/ares1/drone/drone.ino",
		"/Users/kevindoveton/Google Drive/DroneProject/ares1/drone/motors.h",
		"/Users/kevindoveton/Google Drive/DroneProject/ares1/drone/motors.cpp",
		"/Users/kevindoveton/Library/Application Support/Sublime Text 2/Packages/Origami/Default (OSX).sublime-keymap",
		"/Users/kevindoveton/Library/Application Support/Sublime Text 2/Packages/User/Default (OSX).sublime-keymap"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "drone.ino",
					"settings":
					{
						"buffer_size": 4423,
						"regions":
						{
						},
						"selection":
						[
							[
								1001,
								1001
							]
						],
						"settings":
						{
							"syntax": "Packages/User/Stino/Arduino.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
